// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchroniskaTurystyczne.Data;

#nullable disable

namespace SchroniskaTurystyczne.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RoomFacility", b =>
                {
                    b.Property<int>("IdRoom")
                        .HasColumnType("int");

                    b.Property<int>("IdFacility")
                        .HasColumnType("int");

                    b.HasKey("IdRoom", "IdFacility");

                    b.HasIndex("IdFacility");

                    b.ToTable("RoomFacility");

                    b.HasData(
                        new
                        {
                            IdRoom = 1,
                            IdFacility = 1
                        },
                        new
                        {
                            IdRoom = 1,
                            IdFacility = 2
                        },
                        new
                        {
                            IdRoom = 2,
                            IdFacility = 2
                        },
                        new
                        {
                            IdRoom = 2,
                            IdFacility = 3
                        },
                        new
                        {
                            IdRoom = 3,
                            IdFacility = 1
                        });
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdShelter")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f82a9bb2-0417-4456-9a57-b5e74c7fb45d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27be8715-30d7-4a45-89bb-60c72e7e2d84",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOQVh1kJofgMzQRuloKQXrqZHtVl0xI+t3ITZ/tda/c6d2o1b6xCQGWzLPNWkVqsIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "462e714d-1df9-441c-b681-1490226088b7",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "212f7435-21eb-4b56-b78e-335de5e4d634",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e45c31b7-241e-4577-90a3-e9b6f28f713e",
                            Email = "jan.kowalski@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jan",
                            LastName = "Kowalski",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAN.KOWALSKI@EXAMPLE.COM",
                            NormalizedUserName = "JAN.KOWALSKI@EXAMPLE.COM",
                            PasswordHash = "1234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4985bd0c-ce82-4a80-9603-f2829b6f2ca8",
                            TwoFactorEnabled = false,
                            UserName = "jan.kowalski@example.com"
                        });
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Bill")
                        .HasColumnType("float");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Ended")
                        .HasColumnType("bit");

                    b.Property<string>("IdGuest")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdShelter")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Valid")
                        .HasColumnType("bit");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdGuest");

                    b.HasIndex("IdShelter");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.BookingRoom", b =>
                {
                    b.Property<int>("IdBooking")
                        .HasColumnType("int");

                    b.Property<int>("IdRoom")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.HasKey("IdBooking", "IdRoom");

                    b.HasIndex("IdRoom");

                    b.ToTable("BookingRooms");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Schroniska znajdujace się na paśmie górskim Tatr",
                            Name = "Tatry"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Schroniska znajdujace się na paśmaie górskim Bieszczad",
                            Name = "Bieszczady"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Schroniska znajdujace się na paśmaie górskim Beskidu Żywieckiego",
                            Name = "Beskid Żywiecki"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Schroniska znajdujace się na paśmie górskim Beskidu Śląskiego",
                            Name = "Beskid Śląski"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Schroniska znajdujace się na paśmie górskim Karkonoszy",
                            Name = "Karkonosze"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Schroniska znajdujace się na regionach innych niż pasma górskie",
                            Name = "Inne"
                        });
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Toaleta"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Prysznic"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pościel"
                        });
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdReceiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdSender")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdReceiver");

                    b.HasIndex("IdSender");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdShelter")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PhotoData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("ThumbnailData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdShelter");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Point", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdSavedRoute")
                        .HasColumnType("int");

                    b.Property<int?>("IdShelter")
                        .HasColumnType("int");

                    b.Property<double>("LocationLat")
                        .HasColumnType("float");

                    b.Property<double>("LocationLon")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdSavedRoute");

                    b.HasIndex("IdShelter");

                    b.HasIndex("RoomId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contents")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdShelter")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdShelter");

                    b.HasIndex("IdUser");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e0136a9e-ef6b-4fc9-bcf1-4a3c7ee0d19a",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "745cdc32-fa2a-47d4-b7ef-97c199d4a992",
                            Name = "Guest",
                            NormalizedName = "Guest"
                        },
                        new
                        {
                            Id = "318e09f4-db1d-46df-a93d-3654b853b608",
                            Name = "Exhibitor",
                            NormalizedName = "Exhibitor"
                        });
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasConfirmedBooking")
                        .HasColumnType("bit");

                    b.Property<int>("IdShelter")
                        .HasColumnType("int");

                    b.Property<int>("IdType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PricePerNight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdShelter");

                    b.HasIndex("IdType");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 6,
                            HasConfirmedBooking = false,
                            IdShelter = 1,
                            IdType = 1,
                            IsActive = true,
                            Name = "Pokój wspólny",
                            PricePerNight = 50.0
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 2,
                            HasConfirmedBooking = false,
                            IdShelter = 1,
                            IdType = 2,
                            IsActive = true,
                            Name = "Pokój prywatny",
                            PricePerNight = 150.0
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 10,
                            HasConfirmedBooking = false,
                            IdShelter = 1,
                            IdType = 3,
                            IsActive = true,
                            Name = "Pole namiotowe",
                            PricePerNight = 20.0
                        });
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.RoomPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdRoom")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PhotoData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("ThumbnailData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdRoom");

                    b.ToTable("RoomPhotos");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Pokój rezerwowany wspólnie z innymi gośćmi",
                            Name = "Publiczny"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Pokój rezerwowany na własność",
                            Name = "Prywatny"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Wspólne miejsce dla gości na zewnątrz",
                            Name = "Pole"
                        });
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.SavedRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdGuest")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdGuest");

                    b.ToTable("SavedRoutes");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Shelter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AmountOfReviews")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ConfirmedShelter")
                        .HasColumnType("bit");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCategory")
                        .HasColumnType("int");

                    b.Property<string>("IdExhibitor")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationLat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationLon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdExhibitor")
                        .IsUnique();

                    b.ToTable("Shelters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountOfReviews = 0,
                            City = "Zakopane",
                            ConfirmedShelter = true,
                            Country = "Polska",
                            Description = "Malownicze schronisko położone w sercu Tatr.",
                            IdCategory = 1,
                            IdExhibitor = "212f7435-21eb-4b56-b78e-335de5e4d634",
                            LocationLat = "49.2965",
                            LocationLon = "19.9383",
                            Name = "Schronisko Pod Tatrami",
                            Street = "Tatrzańska",
                            StreetNumber = "12",
                            ZipCode = "34-500"
                        });
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Wi-Fi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pola namiotowe"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pokoje"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bufet"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Parking"
                        });
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f82a9bb2-0417-4456-9a57-b5e74c7fb45d",
                            RoleId = "e0136a9e-ef6b-4fc9-bcf1-4a3c7ee0d19a"
                        },
                        new
                        {
                            UserId = "212f7435-21eb-4b56-b78e-335de5e4d634",
                            RoleId = "318e09f4-db1d-46df-a93d-3654b853b608"
                        });
                });

            modelBuilder.Entity("ShelterTag", b =>
                {
                    b.Property<int>("IdShelter")
                        .HasColumnType("int");

                    b.Property<int>("IdTag")
                        .HasColumnType("int");

                    b.HasKey("IdShelter", "IdTag");

                    b.HasIndex("IdTag");

                    b.ToTable("ShelterTag");

                    b.HasData(
                        new
                        {
                            IdShelter = 1,
                            IdTag = 1
                        },
                        new
                        {
                            IdShelter = 1,
                            IdTag = 3
                        },
                        new
                        {
                            IdShelter = 1,
                            IdTag = 5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("SchroniskaTurystyczne.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SchroniskaTurystyczne.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SchroniskaTurystyczne.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SchroniskaTurystyczne.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoomFacility", b =>
                {
                    b.HasOne("SchroniskaTurystyczne.Models.Facility", null)
                        .WithMany()
                        .HasForeignKey("IdFacility")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchroniskaTurystyczne.Models.Room", null)
                        .WithMany()
                        .HasForeignKey("IdRoom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Booking", b =>
                {
                    b.HasOne("SchroniskaTurystyczne.Models.AppUser", "Guest")
                        .WithMany("Bookings")
                        .HasForeignKey("IdGuest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchroniskaTurystyczne.Models.Shelter", "Shelter")
                        .WithMany("Bookings")
                        .HasForeignKey("IdShelter")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.BookingRoom", b =>
                {
                    b.HasOne("SchroniskaTurystyczne.Models.Booking", "Booking")
                        .WithMany("BookingRooms")
                        .HasForeignKey("IdBooking")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchroniskaTurystyczne.Models.Room", "Room")
                        .WithMany("BookingRooms")
                        .HasForeignKey("IdRoom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Message", b =>
                {
                    b.HasOne("SchroniskaTurystyczne.Models.AppUser", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("IdReceiver")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchroniskaTurystyczne.Models.AppUser", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("IdSender")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Photo", b =>
                {
                    b.HasOne("SchroniskaTurystyczne.Models.Shelter", "Shelter")
                        .WithMany("Photos")
                        .HasForeignKey("IdShelter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Point", b =>
                {
                    b.HasOne("SchroniskaTurystyczne.Models.SavedRoute", "SavedRoute")
                        .WithMany("Points")
                        .HasForeignKey("IdSavedRoute")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchroniskaTurystyczne.Models.Shelter", "Shelter")
                        .WithMany("Points")
                        .HasForeignKey("IdShelter");

                    b.HasOne("SchroniskaTurystyczne.Models.Room", null)
                        .WithMany("Points")
                        .HasForeignKey("RoomId");

                    b.Navigation("SavedRoute");

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Review", b =>
                {
                    b.HasOne("SchroniskaTurystyczne.Models.Shelter", "Shelter")
                        .WithMany("Reviews")
                        .HasForeignKey("IdShelter")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SchroniskaTurystyczne.Models.AppUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shelter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Room", b =>
                {
                    b.HasOne("SchroniskaTurystyczne.Models.Shelter", "Shelter")
                        .WithMany("Rooms")
                        .HasForeignKey("IdShelter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchroniskaTurystyczne.Models.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("IdType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RoomType");

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.RoomPhoto", b =>
                {
                    b.HasOne("SchroniskaTurystyczne.Models.Room", "Room")
                        .WithMany("RoomPhotos")
                        .HasForeignKey("IdRoom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.SavedRoute", b =>
                {
                    b.HasOne("SchroniskaTurystyczne.Models.AppUser", "Guest")
                        .WithMany("SavedRoutes")
                        .HasForeignKey("IdGuest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Shelter", b =>
                {
                    b.HasOne("SchroniskaTurystyczne.Models.Category", "Category")
                        .WithMany("Shelters")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchroniskaTurystyczne.Models.AppUser", "Exhibitor")
                        .WithOne("Shelter")
                        .HasForeignKey("SchroniskaTurystyczne.Models.Shelter", "IdExhibitor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Exhibitor");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.UserRole", b =>
                {
                    b.HasOne("SchroniskaTurystyczne.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchroniskaTurystyczne.Models.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShelterTag", b =>
                {
                    b.HasOne("SchroniskaTurystyczne.Models.Shelter", null)
                        .WithMany()
                        .HasForeignKey("IdShelter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchroniskaTurystyczne.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("IdTag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.AppUser", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("Reviews");

                    b.Navigation("SavedRoutes");

                    b.Navigation("SentMessages");

                    b.Navigation("Shelter");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Booking", b =>
                {
                    b.Navigation("BookingRooms");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Category", b =>
                {
                    b.Navigation("Shelters");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Room", b =>
                {
                    b.Navigation("BookingRooms");

                    b.Navigation("Points");

                    b.Navigation("RoomPhotos");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.SavedRoute", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("SchroniskaTurystyczne.Models.Shelter", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Photos");

                    b.Navigation("Points");

                    b.Navigation("Reviews");

                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
