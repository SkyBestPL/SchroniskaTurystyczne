@model IEnumerable<SchroniskaTurystyczne.Models.SavedRoute>
@using System.Text.Json
@using System.Text.Json.Serialization

@{
    ViewData["Title"] = "Twoje Trasy";
}

<h2>@ViewData["Title"]</h2>

<div id="map" style="height: 400px;"></div>

<table class="table">
    <thead>
        <tr>
            <th>Nazwa Trasy</th>
            <th>Akcja</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var route in Model)
        {
            var routePointsJson = JsonSerializer.Serialize(route.Points.Select(p => new { locationLat = p.LocationLat, locationLon = p.LocationLon }));
            <tr>
                <td>@route.Name</td>
                <td>
                    <button class="btn btn-primary" onclick="showRouteOnMap('@routePointsJson')">Pokaż Trasę</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<script>
    const API_KEY = 'EqrphcGjSSf6pg5L1FXub1nmdOe9HzC_FV00UDqrve4';

    const map = new maplibregl.Map({
        container: 'map',
        center: [19.48022053933678, 52.06936257159014],
        zoom: 6,
        style: {
            version: 8,
            sources: {
                'basic-tiles': {
                    type: 'raster',
                    url: `https://api.mapy.cz/v1/maptiles/basic/tiles.json?apikey=${API_KEY}`,
                    tileSize: 256,
                },
                'route-geometry': {
                    type: 'geojson',
                    data: {
                        type: "LineString",
                        coordinates: [],
                    },
                },
            },
            layers: [{
                id: 'tiles',
                type: 'raster',
                source: 'basic-tiles',
            }, {
                id: 'route-geometry',
                type: 'line',
                source: 'route-geometry',
                layout: {
                    'line-join': 'round',
                    'line-cap': 'round',
                },
                paint: {
                    'line-color': '#0033ff',
                    'line-width': 8,
                    'line-opacity': 0.6,
                },
            }],
        },
    });

    let markers = [];  // Tablica do przechowywania wszystkich markerów

    // Funkcja obliczająca trasę przy użyciu API Mapy.cz
    async function calculateRoute(points) {
        try {
            const url = new URL('https://api.mapy.cz/v1/routing/route');

            url.searchParams.set('apikey', API_KEY);
            url.searchParams.set('lang', 'pl');
            url.searchParams.set('routeType', 'foot_fast');
            url.searchParams.set('avoidToll', 'false');

            url.searchParams.set('start', points[0].join(','));
            url.searchParams.set('end', points[points.length - 1].join(','));

            for (let i = 1; i < points.length - 1; i++) {
                url.searchParams.append('waypoints', points[i].join(','));
            }

            const response = await fetch(url.toString(), { mode: 'cors' });
            const json = await response.json();

            const source = map.getSource('route-geometry');
            if (source && json.geometry) {
                source.setData(json.geometry);
            }

            // Dodanie markerów w punktach trasy
            addMarkers(points);

            // Dopasowanie widoku mapy do trasy
            const bounds = bbox(json.geometry.geometry.coordinates);
            map.fitBounds(bounds, { padding: 40 });
        } catch (error) {
            console.log('Błąd podczas wyznaczania trasy:', error);
        }
    }

    // Funkcja do dodawania markerów na mapie
    function addMarkers(points) {
        // Usuń istniejące markery
        markers.forEach(marker => marker.remove());
        markers = [];  // Resetowanie tablicy markerów

        // Dodaj nowe markery dla każdego punktu
        points.forEach((point, index) => {
            const marker = new maplibregl.Marker({
                color: index === 0 ? 'green' : (index === points.length - 1 ? 'red' : 'blue') // Zielony dla startu, czerwony dla końca, niebieski dla pośrednich
            })
                .setLngLat([point[0], point[1]])  // Ustawienie współrzędnych markera
                .addTo(map);

            // Dodanie markera do tablicy
            markers.push(marker);
        });
    }

    // Funkcja do wyświetlania trasy na mapie (korzysta z calculateRoute)
    function showRouteOnMap(routePointsJson) {
        const points = JSON.parse(routePointsJson);
        const coordinates = points.map(point => [point.locationLon, point.locationLat]);

        // Wywołanie funkcji calculateRoute do wyznaczenia trasy
        calculateRoute(coordinates);
    }

    // Funkcja bbox - liczy zasięg mapy dla współrzędnych
    function bbox(coords) {
        let minLat = Infinity, minLng = Infinity, maxLat = -Infinity, maxLng = -Infinity;

        coords.forEach(coord => {
            minLng = Math.min(coord[0], minLng);
            maxLng = Math.max(coord[0], maxLng);
            minLat = Math.min(coord[1], minLat);
            maxLat = Math.max(coord[1], maxLat);
        });

        return [[minLng, minLat], [maxLng, maxLat]];
    }
</script>