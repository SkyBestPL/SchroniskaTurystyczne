@model SchroniskaTurystyczne.Models.Shelter

@{
    ViewData["Title"] = "Rezerwacja";
}

<div class="booking-shelter-info">
    <h1>@Model.Name</h1>
    <div class="booking-shelter-photos">
        @foreach (var photo in Model.Photos)
        {
            <img src="data:image/jpeg;base64,@Convert.ToBase64String(photo.PhotoData)" alt="Zdjęcie schroniska" class="booking-shelter-photo" />
        }
    </div>
</div>

<div class="date-reservation">
    <h2 class="h2-rooms">Rezerwacja noclegu w schronisku <span class="shelter-name">@Model.Name</span></h2>

    <div class="date-selection">
        <div class="date-pair">
            <label>Data zameldowania:</label>
            <input type="date" id="checkInDate" required />
        </div>
        <div class="date-pair">
            <label>Data wymeldowania:</label>
            <input type="date" id="checkOutDate" required />
        </div>
    </div>
    <button class="confirm-booking-btn" onclick="confirmBooking()">Zarezerwuj</button>
</div>

<div style="height: 120px"></div>

<div class="room-sections">
    <!-- Sekcja dla pokoi prywatnych -->
    <div class="room-section private-rooms">
        <h3>Pokoje Prywatne</h3>
        <div id="privateRooms" class="room-container">
            @foreach (var room in Model.Rooms.Where(r => r.IdType == 2))
            {
                <div class="room-card">
                    <h4>@room.Name</h4>
                    <p>Cena za osobę: @room.PricePerNight zł</p>
                    <p>Pojemność osób: @room.Capacity</p>
                    <label>
                        <input type="checkbox" class="privateRoomCheckbox" data-room-name="@room.Name" data-room-id="@room.Id" data-capacity="@room.Capacity" />
                        Rezerwuj cały pokój
                    </label>
                    <div id="calendar-@room.Id" class="calendar" data-room-id="@room.Id"></div>
                </div>
            }
        </div>
    </div>

    <!-- Sekcja dla pokoi publicznych -->
    <div class="room-section public-rooms">
        <h3>Pokoje Publiczne</h3>
        <div id="publicRooms" class="room-container">
            @foreach (var room in Model.Rooms.Where(r => r.IdType == 1))
            {
                <div class="room-card">
                    <h4>@room.Name</h4>
                    <p>Cena za osobę: @room.PricePerNight zł</p>
                    <p>Pojemność osób: @room.Capacity</p>
                    <label>Liczba osób:</label>
                    <input type="number" class="numberOfPeople" data-room-name="@room.Name" data-room-id="@room.Id" min="0" max="@room.Capacity" />
                    <div id="calendar-@room.Id" class="calendar" data-room-id="@room.Id"></div>
                </div>
            }
        </div>
    </div>

    <!-- Sekcja dla działek -->
    <div class="room-section plot-rooms">
        <h3>Działki</h3>
        <div id="plotRooms" class="room-container">
            @foreach (var room in Model.Rooms.Where(r => r.IdType == 3))
            {
                <div class="room-card">
                    <h4>@room.Name</h4>
                    <p>Cena za osobę: @room.PricePerNight zł</p>
                    <p>Pojemność osób: @room.Capacity</p>
                    <label>Liczba osób:</label>
                    <input type="number" class="numberOfPeople" data-room-name="@room.Name" data-room-id="@room.Id" min="1" max="@room.Capacity" />
                    <div id="calendar-@room.Id" class="calendar" data-room-id="@room.Id"></div>
                </div>
            }
        </div>
    </div>
</div>

 <script>

    document.addEventListener('DOMContentLoaded', function () {
        // Pobierz wszystkie elementy kalendarza
        document.querySelectorAll('.calendar').forEach(calendarDiv => {
            const roomId = calendarDiv.getAttribute('data-room-id');
            if (!roomId) {
                console.error("Błąd: roomId jest null lub nie istnieje dla elementu", calendarDiv);
                return;
            }
            console.log("Room ID:", roomId);
            // Konfiguracja FullCalendar dla każdego pokoju
            const calendar = new FullCalendar.Calendar(calendarDiv, {
                initialView: 'dayGridMonth',
                locale: 'pl',
                events: function (fetchInfo, successCallback, failureCallback) {
                    // Pobierz dane rezerwacji dla pokoju z kontrolera
                    fetch(`/Booking/GetRoomBookings?roomId=${roomId}`)
                        .then(response => response.json())
                        .then(data => {
                            successCallback(data);
                        })
                        .catch(error => {
                            console.error("Błąd podczas ładowania danych rezerwacji:", error);
                            failureCallback(error);
                        });
                }
            });

            calendar.render();
        });
    });

    function isBookingAvailable(checkInDate, checkOutDate, roomId, numberOfPeople) {
        // Pobierz dane kalendarza dla pokoju
        return fetch(`/Booking/GetRoomBookings?roomId=${roomId}`)
            .then(response => response.json())
            .then(events => {
                // Sprawdź każde wydarzenie w kalendarzu
                for (const event of events) {
                    const eventStart = new Date(event.start);
                    const eventEnd = new Date(event.end);
                    const isDateOverlapping = (checkInDate < eventEnd && checkOutDate > eventStart);

                    if (isDateOverlapping) {
                        // Jeżeli dzień jest pełny (kolor czerwony) zwróć false
                        if (event.color === "red") {
                            return false;
                        }

                        // Jeżeli jest częściowo pełny (kolor żółty), sprawdź, czy dodanie kolejnych osób nie przekroczy pojemności
                        const occupiedCapacity = parseInt(event.title.split('/')[0]);
                        const maxCapacity = parseInt(event.title.split('/')[1]);
                        if (occupiedCapacity + numberOfPeople > maxCapacity) {
                            return false;
                        }
                    }
                }
                return true;
            });
    }

    async function confirmBooking() {
        const checkInDate = new Date(document.getElementById("checkInDate").value);
        const checkOutDate = new Date(document.getElementById("checkOutDate").value);

        if (!checkInDate || !checkOutDate || checkInDate >= checkOutDate) {
            alert("Wybierz poprawne daty zameldowania i wymeldowania.");
            return;
        }

        const selectedRooms = [];
        const privateRooms = document.querySelectorAll('.privateRoomCheckbox:checked');
        const publicRooms = document.querySelectorAll('.numberOfPeople');

        let totalPrice = 0;

        // Zbierz dane pokoi prywatnych
        privateRooms.forEach(roomCheckbox => {
            const roomId = roomCheckbox.getAttribute('data-room-id');
            const roomName = roomCheckbox.getAttribute('data-room-name');
            const capacity = roomCheckbox.getAttribute('data-capacity');
            const pricePerNight = parseFloat(roomCheckbox.closest('div').querySelector('p').textContent.split(': ')[1]);
            const nights = (checkOutDate - checkInDate) / (1000 * 3600 * 24);
            totalPrice += capacity * pricePerNight * nights;

            selectedRooms.push({ roomId, numberOfPeople: capacity, roomName });
        });

        // Zbierz dane pokoi publicznych i działek
        publicRooms.forEach(input => {
            const roomId = input.getAttribute('data-room-id');
            const roomName = input.getAttribute('data-room-name');
            const numberOfPeople = parseInt(input.value);
            const pricePerNight = parseFloat(input.closest('div').querySelector('p').textContent.split(': ')[1]);
            const nights = (checkOutDate - checkInDate) / (1000 * 3600 * 24);

            if (numberOfPeople > 0) {
                totalPrice += numberOfPeople * pricePerNight * nights;
                selectedRooms.push({ roomId, numberOfPeople, roomName });
            }
        });

        if (selectedRooms.length === 0) {
            alert("Nie wybrano żadnego pokoju.");
            return;
        }

        // Wyświetl podsumowanie rezerwacji
        document.getElementById("reservationSummary").innerHTML = selectedRooms
            .map(room => `Pokój: ${room.roomName}, Liczba osób: ${room.numberOfPeople}`)
            .join("<br>");
        document.getElementById("totalPrice").textContent = totalPrice.toFixed(2);

        // Otwórz modal Bootstrap
        var summaryModal = new bootstrap.Modal(document.getElementById('summaryModal'));
        summaryModal.show();
    }

    function closeSummaryModal() {
        document.getElementById("summaryModal").style.display = 'none';
    }

    async function finalizeBooking() {
        const checkInDate = new Date(document.getElementById("checkInDate").value);
        const checkOutDate = new Date(document.getElementById("checkOutDate").value);

        const selectedRooms = [];
        const privateRooms = document.querySelectorAll('.privateRoomCheckbox:checked');
        const publicRooms = document.querySelectorAll('.numberOfPeople');

        // Zbierz dane pokoi prywatnych
        privateRooms.forEach(roomCheckbox => {
            const roomId = roomCheckbox.getAttribute('data-room-id');
            const capacity = roomCheckbox.getAttribute('data-capacity');
            selectedRooms.push({ roomId, numberOfPeople: capacity });
        });

        // Zbierz dane pokoi publicznych i działek
        publicRooms.forEach(input => {
            const roomId = input.getAttribute('data-room-id');
            const numberOfPeople = parseInt(input.value);
            if (numberOfPeople > 0) {
                selectedRooms.push({ roomId, numberOfPeople });
            }
        });

        // Wyślij dane do kontrolera
        fetch('/Booking/ConfirmBooking', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                checkInDate: checkInDate.toISOString(),
                checkOutDate: checkOutDate.toISOString(),
                rooms: selectedRooms
            }),
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Rezerwacja zakończona sukcesem!");
                    window.location.href = '/Shelters/Index';
                } else {
                    alert("Rezerwacja nie powiodła się: " + data.message);
                }
            })
            .catch(error => console.error("Błąd podczas rezerwacji:", error));
    }

    function openSummaryModal() {
        document.getElementById("modalOverlay").style.display = 'block';
        document.getElementById("summaryModal").style.display = 'block';
    }

    function closeSummaryModal() {
        document.getElementById("modalOverlay").style.display = 'none';
        document.getElementById("summaryModal").style.display = 'none';
    }

</script>

<!-- Modal Podsumowania Rezerwacji -->
<div style="z-index: 2000" class="modal fade" id="summaryModal" tabindex="-1" aria-labelledby="summaryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="background-color: #f0f8ff; color: #333;">
            <div class="modal-header" style="background-color: #0066cc; color: #fff;">
                <h5 class="modal-title" id="summaryModalLabel">Podsumowanie rezerwacji</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="reservationSummary"></div>
                <p style="font-weight: bold; margin-top: 15px;">Łączna suma: <span id="totalPrice"></span> zł</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" onclick="finalizeBooking()">Rezerwuj</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
            </div>
        </div>
    </div>
</div>