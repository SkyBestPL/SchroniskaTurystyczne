@model SchroniskaTurystyczne.ViewModels.ShelterBookingViewModel

@{
    ViewData["Title"] = "Rezerwacja";
}

<div class="booking-shelter-info">
    <h1>@Model.Name</h1>
    <div id="shelter-photos" class="booking-shelter-photos">
        <!--<p>Ładowanie zdjęć...</p>-->
    </div>
    <a style="background-color:aquamarine; color: black" asp-action="Index" asp-controller="Message" asp-route-shelterId="@Model.Id">Napisz do właściciela</a>
</div>

<div class="date-reservation">
    <h2 class="h2-rooms">Rezerwacja noclegu w schronisku <span class="shelter-name">@Model.Name</span></h2>

    <div class="date-selection">
        <div class="date-pair">
            <label>Data zameldowania:</label>
            <input type="date" id="checkInDate" required />
        </div>
        <div class="date-pair">
            <label>Data wymeldowania:</label>
            <input type="date" id="checkOutDate" required />
        </div>
    </div>
    <button class="confirm-booking-btn" onclick="confirmBooking()">Zarezerwuj</button>
</div>

<div style="height: 120px"></div>

<div class="room-sections">
    <!-- Sekcja dla pokoi prywatnych -->
    <div class="room-section">
        <h3>Pokoje Prywatne</h3>
        <div id="privateRooms" class="room-container">
            @foreach (var room in Model.Rooms.Where(r => r.IdType == 2))
            {
                <div class="room-card">
                    <div class="room-header">
                        <div class="room-info">
                            <h4>@room.Name</h4>
                            <p><span class="room-text">Cena:</span> @room.PricePerNight zł</p>
                            <p><span class="room-text">Pojemność:</span> @room.Capacity <i class="bi bi-person"></i></p>
                            @if (room.Facilities != null && room.Facilities.Any())
                            {
                                <p class="facilities-tooltip-trigger" data-facilities="@string.Join(',', room.Facilities.Select(f => f.Name))">
                                    Lista udogodnień
                                </p>
                                <div class="facilities-tooltip" style="display: none;"></div>
                            }
                            <label>
                                <input type="checkbox" class="privateRoomCheckbox" data-room-name="@room.Name" data-room-id="@room.Id" data-capacity="@room.Capacity" />
                                Rezerwuj cały pokój
                            </label>
                        </div>
                        <div class="room-photo-preview" onclick="openRoomPhotoModal(@room.Id)">
                            <img data-src="@Url.Action("GetRoomThumbnail", "Booking", new { roomId = room.Id })" alt="Zdjęcie pokoju" class="lazy-load" />
                        </div>
                    </div>
                    <div id="calendar-@room.Id" class="calendar" data-room-id="@room.Id"></div>
                </div>
            }
        </div>
    </div>

    <!-- Sekcja dla pokoi publicznych -->
    <div class="room-section">
        <h3>Pokoje Publiczne</h3>
        <div id="publicRooms" class="room-container">
            @foreach (var room in Model.Rooms.Where(r => r.IdType == 1))
            {
                <div class="room-card">
                    <div class="room-header">
                        <div class="room-info">
                            <h4>@room.Name</h4>
                            <p><span class="room-text">Cena:</span> @room.PricePerNight zł</p>
                            <p><span class="room-text">Pojemność:</span> @room.Capacity <i class="bi bi-person"></i></p>
                            @if (room.Facilities != null && room.Facilities.Any())
                            {
                                <p class="facilities-tooltip-trigger" data-facilities="@string.Join(',', room.Facilities.Select(f => f.Name))">
                                    Lista udogodnień
                                </p>
                                <div class="facilities-tooltip" style="display: none;"></div>
                            }
                            <label>Liczba osób:</label>
                            <input type="number" class="numberOfPeople" data-room-name="@room.Name" data-room-id="@room.Id" min="0" max="@room.Capacity" />
                        </div>
                        <div class="room-photo-preview" onclick="openRoomPhotoModal(@room.Id)">
                            <img data-src="@Url.Action("GetRoomThumbnail", "Booking", new { roomId = room.Id })" alt="Zdjęcie pokoju" class="lazy-load" />
                        </div>
                    </div>
                    <div id="calendar-@room.Id" class="calendar" data-room-id="@room.Id"></div>
                </div>
            }
        </div>
    </div>

    <!-- Sekcja dla pól namiotowych -->
    <div class="room-section">
        <h3>Pola Namiotowe</h3>
        <div id="plotRooms" class="room-container">
            @foreach (var room in Model.Rooms.Where(r => r.IdType == 3))
            {
                <div class="room-card">
                    <div class="room-header">
                        <div class="room-info">
                            <h4>@room.Name</h4>
                            <p><span class="room-text">Cena:</span> @room.PricePerNight zł</p>
                            <p><span class="room-text">Pojemność:</span> @room.Capacity <i class="bi bi-person"></i></p>
                            @if (room.Facilities != null && room.Facilities.Any())
                            {
                                <p class="facilities-tooltip-trigger" data-facilities="@string.Join(',', room.Facilities.Select(f => f.Name))">
                                    Lista udogodnień
                                </p>
                                <div class="facilities-tooltip" style="display: none;"></div>
                            }
                            <label>Liczba osób:</label>
                            <input type="number" class="numberOfPeople" data-room-name="@room.Name" data-room-id="@room.Id" min="1" max="@room.Capacity" />
                        </div>
                        <div class="room-photo-preview" onclick="openRoomPhotoModal(@room.Id)">
                            <img data-src="@Url.Action("GetRoomThumbnail", "Booking", new { roomId = room.Id })" alt="Zdjęcie pokoju" class="lazy-load" />
                        </div>
                    </div>
                    <div id="calendar-@room.Id" class="calendar" data-room-id="@room.Id"></div>
                </div>
            }
        </div>
    </div>
</div>

<div style="margin-bottom: 150px"></div>

 <script>

    document.addEventListener('DOMContentLoaded', function () {
        // Pobierz wszystkie elementy kalendarza
        document.querySelectorAll('.calendar').forEach(calendarDiv => {
            const roomId = calendarDiv.getAttribute('data-room-id');
            if (!roomId) {
                console.error("Błąd: roomId jest null lub nie istnieje dla elementu", calendarDiv);
                return;
            }
            console.log("Room ID:", roomId);
            // Konfiguracja FullCalendar dla każdego pokoju
            const calendar = new FullCalendar.Calendar(calendarDiv, {
                initialView: 'dayGridMonth',
                locale: 'pl',
                events: function (fetchInfo, successCallback, failureCallback) {
                    // Pobierz dane rezerwacji dla pokoju z kontrolera
                    fetch(`/Booking/GetRoomBookings?roomId=${roomId}`)
                        .then(response => response.json())
                        .then(data => {
                            successCallback(data);
                        })
                        .catch(error => {
                            console.error("Błąd podczas ładowania danych rezerwacji:", error);
                            failureCallback(error);
                        });
                }
            });

            calendar.render();
        });
    });

    function isBookingAvailable(checkInDate, checkOutDate, roomId, numberOfPeople) {
        // Pobierz dane kalendarza dla pokoju
        return fetch(`/Booking/GetRoomBookings?roomId=${roomId}`)
            .then(response => response.json())
            .then(events => {
                // Sprawdź każde wydarzenie w kalendarzu
                for (const event of events) {
                    const eventStart = new Date(event.start);
                    const eventEnd = new Date(event.end);
                    const isDateOverlapping = (checkInDate < eventEnd && checkOutDate > eventStart);

                    if (isDateOverlapping) {
                        // Jeżeli dzień jest pełny (kolor czerwony) zwróć false
                        if (event.color === "red") {
                            return false;
                        }

                        // Jeżeli jest częściowo pełny (kolor żółty), sprawdź, czy dodanie kolejnych osób nie przekroczy pojemności
                        const occupiedCapacity = parseInt(event.title.split('/')[0]);
                        const maxCapacity = parseInt(event.title.split('/')[1]);
                        if (occupiedCapacity + numberOfPeople > maxCapacity) {
                            return false;
                        }
                    }
                }
                return true;
            });
    }

    async function confirmBooking() {
        const checkInDate = new Date(document.getElementById("checkInDate").value);
        const checkOutDate = new Date(document.getElementById("checkOutDate").value);

        if (!checkInDate || !checkOutDate || checkInDate >= checkOutDate) {
            alert("Wybierz poprawne daty zameldowania i wymeldowania.");
            return;
        }

        const selectedRooms = [];
        const privateRooms = document.querySelectorAll('.privateRoomCheckbox:checked');
        const publicRooms = document.querySelectorAll('.numberOfPeople');

        let totalPrice = 0;

        // Zbierz dane pokoi prywatnych
        privateRooms.forEach(roomCheckbox => {
            const roomId = roomCheckbox.getAttribute('data-room-id');
            const roomName = roomCheckbox.getAttribute('data-room-name');
            const capacity = roomCheckbox.getAttribute('data-capacity');
            const pricePerNight = parseFloat(roomCheckbox.closest('div').querySelector('p').textContent.split(': ')[1]);
            const nights = (checkOutDate - checkInDate) / (1000 * 3600 * 24);
            totalPrice += capacity * pricePerNight * nights;

            selectedRooms.push({ roomId, numberOfPeople: capacity, roomName });
        });

        // Zbierz dane pokoi publicznych i działek
        publicRooms.forEach(input => {
            const roomId = input.getAttribute('data-room-id');
            const roomName = input.getAttribute('data-room-name');
            const numberOfPeople = parseInt(input.value);
            const pricePerNight = parseFloat(input.closest('div').querySelector('p').textContent.split(': ')[1]);
            const nights = (checkOutDate - checkInDate) / (1000 * 3600 * 24);

            if (numberOfPeople > 0) {
                totalPrice += numberOfPeople * pricePerNight * nights;
                selectedRooms.push({ roomId, numberOfPeople, roomName });
            }
        });

        if (selectedRooms.length === 0) {
            alert("Nie wybrano żadnego pokoju.");
            return;
        }

        // Wyświetl podsumowanie rezerwacji
        document.getElementById("reservationSummary").innerHTML = selectedRooms
            .map(room => `Pokój: ${room.roomName}, Liczba osób: ${room.numberOfPeople}`)
            .join("<br>");
        document.getElementById("totalPrice").textContent = totalPrice.toFixed(2);

        // Otwórz modal Bootstrap
        var summaryModal = new bootstrap.Modal(document.getElementById('summaryModal'));
        summaryModal.show();
    }

    function closeSummaryModal() {
        document.getElementById("summaryModal").style.display = 'none';
    }

    async function finalizeBooking() {
        const checkInDate = new Date(document.getElementById("checkInDate").value);
        const checkOutDate = new Date(document.getElementById("checkOutDate").value);

        const selectedRooms = [];
        const privateRooms = document.querySelectorAll('.privateRoomCheckbox:checked');
        const publicRooms = document.querySelectorAll('.numberOfPeople');

        // Zbierz dane pokoi prywatnych
        privateRooms.forEach(roomCheckbox => {
            const roomId = roomCheckbox.getAttribute('data-room-id');
            const capacity = roomCheckbox.getAttribute('data-capacity');
            selectedRooms.push({ roomId, numberOfPeople: capacity });
        });

        // Zbierz dane pokoi publicznych i działek
        publicRooms.forEach(input => {
            const roomId = input.getAttribute('data-room-id');
            const numberOfPeople = parseInt(input.value);
            if (numberOfPeople > 0) {
                selectedRooms.push({ roomId, numberOfPeople });
            }
        });

        // Wyślij dane do kontrolera
        fetch('/Booking/ConfirmBooking', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                checkInDate: checkInDate.toISOString(),
                checkOutDate: checkOutDate.toISOString(),
                rooms: selectedRooms
            }),
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Rezerwacja zakończona sukcesem!");
                    window.location.href = '/Shelters/Index';
                } else {
                    alert("Rezerwacja nie powiodła się: " + data.message);
                }
            })
            .catch(error => console.error("Błąd podczas rezerwacji:", error));
    }

    function openSummaryModal() {
        document.getElementById("modalOverlay").style.display = 'block';
        document.getElementById("summaryModal").style.display = 'block';
    }

    function closeSummaryModal() {
        document.getElementById("modalOverlay").style.display = 'none';
        document.getElementById("summaryModal").style.display = 'none';
    }

    function openRoomPhotoModal(roomId) {
        // Sprawdź, czy modal już istnieje
        if (document.getElementById(`roomPhotoModal-${roomId}`)) {
            return;
        }
        console.log(roomId);
        // Wyświetl loader
        const loaderHtml = `
            <div id="roomPhotoModal-${roomId}" class="room-photo-modal">
                <div class="room-photo-modal-content">
                    <span class="close" onclick="closeRoomPhotoModal(${roomId})">&times;</span>
                    <div class="room-photo-loader">Ładowanie zdjęć...</div>
                </div>
            </div>
        `;
        document.body.insertAdjacentHTML('beforeend', loaderHtml);

        // Wykonaj zapytanie do serwera o zdjęcia
        fetch(`/Booking/GetRoomPhotos?roomId=${roomId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Nie udało się pobrać zdjęć.');
                }
                return response.json();
            })
            .then(roomPhotos => {
                if (!Array.isArray(roomPhotos) || roomPhotos.length === 0) {
                    alert('Brak zdjęć dla tego pokoju.');
                    closeRoomPhotoModal(roomId);
                    return;
                }

                // Zbuduj HTML dla zdjęć
                let photosHtml = roomPhotos.map((photo, index) => `
                    <div class="room-photo-slide ${index === 0 ? 'active' : ''}">
                        <img src="data:image/jpeg;base64,${photo.photoData}" alt="Zdjęcie pokoju ${index + 1}" />
                    </div>
                `).join('');

                let navigationHtml = roomPhotos.length > 1 ? `
                    <button class="photo-nav prev" onclick="changeSlide(${roomId}, -1)">&#10094;</button>
                    <button class="photo-nav next" onclick="changeSlide(${roomId}, 1)">&#10095;</button>
                ` : '';

                // Wstrzyknij zdjęcia do modala
                const modalContent = document.querySelector(`#roomPhotoModal-${roomId} .room-photo-modal-content`);
                modalContent.innerHTML = `
                    <span class="close" onclick="closeRoomPhotoModal(${roomId})">&times;</span>
                    <div class="room-photo-slides">
                        ${photosHtml}
                    </div>
                    ${navigationHtml}
                `;
            })
            .catch(error => {
                alert(error.message);
                closeRoomPhotoModal(roomId);
            });
    }

    function changeSlide(roomId, direction) {
        const slides = document.querySelectorAll(`#roomPhotoModal-${roomId} .room-photo-slide`);
        const currentSlide = document.querySelector(`#roomPhotoModal-${roomId} .room-photo-slide.active`);
        let currentIndex = Array.from(slides).indexOf(currentSlide);

        currentSlide.classList.remove('active');

        currentIndex += direction;

        if (currentIndex < 0) currentIndex = slides.length - 1;
        if (currentIndex >= slides.length) currentIndex = 0;

        slides[currentIndex].classList.add('active');
    }

    function closeRoomPhotoModal(roomId) {
        const modal = document.getElementById(`roomPhotoModal-${roomId}`);
        if (modal) {
            modal.remove();
        }
    }

    document.addEventListener("DOMContentLoaded", function () {
        const shelterId = @Model.Id;
        const photosContainer = document.getElementById("shelter-photos");

        fetch(`/Booking/GetPhotos?shelterId=${shelterId}`)
            .then(response => response.json())
            .then(data => {
                photosContainer.innerHTML = "";
                if (data.length > 0) {
                    data.forEach(photo => {
                        const img = document.createElement("img");
                        img.src = `data:image/jpeg;base64,${photo}`;
                        img.alt = "Zdjęcie schroniska";
                        img.classList.add("booking-shelter-photo");
                        photosContainer.appendChild(img);
                    });
                } else {
                    photosContainer.innerHTML = "<p>Brak zdjęć.</p>";
                }
            })
            .catch(error => {
                console.error("Błąd podczas ładowania zdjęć:", error);
                photosContainer.innerHTML = "<p>Nie udało się załadować zdjęć.</p>";
            });
    });

    document.addEventListener('DOMContentLoaded', () => {
        const triggers = document.querySelectorAll('.facilities-tooltip-trigger');

        triggers.forEach(trigger => {
            trigger.addEventListener('mouseover', (e) => {
                const facilities = e.target.dataset.facilities.split(',');
                const tooltip = e.target.nextElementSibling;

                // Wypełnij tooltip
                tooltip.innerHTML = facilities.map(facility => `<p>${facility}</p>`).join('');
                tooltip.style.display = 'block';

                // Pozycjonowanie tooltipa
                tooltip.style.left = `${e.pageX + 10}px`;
                tooltip.style.top = `${e.pageY + 10}px`;
            });

            trigger.addEventListener('mouseout', (e) => {
                const tooltip = e.target.nextElementSibling;
                tooltip.style.display = 'none';
            });
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        const lazyLoadImages = document.querySelectorAll('.lazy-load');

        const observer = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    img.src = img.dataset.src;
                    img.classList.remove('lazy-load');
                    observer.unobserve(img);
                }
            });
        });

        lazyLoadImages.forEach(img => observer.observe(img));
    });

</script>

<!-- Modal Podsumowania Rezerwacji -->
<div style="z-index: 2000" class="modal fade" id="summaryModal" tabindex="-1" aria-labelledby="summaryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" style="max-width: 500px;">
        <!-- Zwiększona szerokość modalu -->
        <div class="modal-content" style="background-color: darkcyan; color: #fff; border-radius: 12px;">
            <div class="modal-header" style="background-color: aquamarine; color: black; border-top-left-radius: 12px; border-top-right-radius: 12px;">
                <h5 class="modal-title" id="summaryModalLabel" style="font-weight: bold;">Podsumowanie rezerwacji</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" style="background-color: darkcyan;"></button>
            </div>
            <div class="modal-body" style="text-align: center;">
                <!-- Sekcja z typem pokoju -->
                <div id="reservationSummary" style="margin-bottom: 15px; line-height: 1.5;">
                    <p style="font-size: 1.1em; font-weight: bold;">Typ pokoju: <span id="roomType" style="color: aquamarine;">Deluxe</span></p>
                    <p style="font-size: 1em;">Liczba osób: <span id="guestCount" style="color: aquamarine;">2</span></p>
                </div>
                <p style="font-weight: bold; font-size: 1.2em;">Łączna suma: <span id="totalPrice" style="color: aquamarine;"></span> zł</p>
            </div>
            <div class="modal-footer" style="justify-content: center; border-top: none;">
                <button type="button" class="btn btn-success" onclick="finalizeBooking()" style="background-color: aquamarine; color: black; font-weight: bold; border: none; padding: 10px 20px; border-radius: 5px;">Rezerwuj</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" style="background-color: #f44336; color: white; font-weight: bold; border: none; padding: 10px 20px; border-radius: 5px; margin-left: 10px;">Anuluj</button>
            </div>
        </div>
    </div>
</div>