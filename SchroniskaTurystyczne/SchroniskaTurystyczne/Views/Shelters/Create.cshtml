<!-- Formularz schroniska -->
@model SchroniskaTurystyczne.ViewModels.ShelterCreateViewModel

@{
    ViewData["Title"] = "Stwórz Schronisko";
}

<h2>@ViewData["Title"]</h2>

<form id="formularz" asp-action="Create" method="post" enctype="multipart/form-data" class="mb-5">

    <div class="form-group">
        <label asp-for="IdCategory" class="control-label">Kategoria</label>
        <select asp-for="IdCategory" class="form-control" asp-items="Model.Categories">
            <option value="">-- Wybierz kategorię --</option>
        </select>
        <span asp-validation-for="IdCategory" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Name" class="control-label">Nazwa Schroniska</label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Description" class="control-label">Opis</label>
        <textarea asp-for="Description" class="form-control"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <h4 style="margin-top: 20px">Adres Schroniska</h4>
    <div class="form-group">
        <label asp-for="Country" class="control-label">Kraj</label>
        <input asp-for="Country" class="form-control" />
        <span asp-validation-for="Country" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="City" class="control-label">Miasto</label>
        <input asp-for="City" class="form-control" />
        <span asp-validation-for="City" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Street" class="control-label">Ulica</label>
        <input asp-for="Street" class="form-control" />
        <span asp-validation-for="Street" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="StreetNumber" class="control-label">Numer ulicy</label>
        <input asp-for="StreetNumber" class="form-control" />
        <span asp-validation-for="StreetNumber" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="ZipCode" class="control-label">Kod pocztowy</label>
        <input asp-for="ZipCode" class="form-control" />
        <span asp-validation-for="ZipCode" class="text-danger"></span>
    </div>

    <input type="hidden" asp-for="LocationLat" id="Latitude" />
    <input type="hidden" asp-for="LocationLon" id="Longitude" />

    <label>Zaznacz na mapie dokładną lokalizację swojego schroniska, aby klienci mogli je łatwiej odnaleźć:</label>
    <div id="map" style="height: 400px; margin-bottom: 20px;"></div>

    <h4 style="margin-top: 20px">Zdjęcia schroniska</h4>

    <div class="form-group">
        <input type="file" name="Photos" class="form-control" multiple accept=".jpg, .jpeg, .png" />
    </div>

    <h4 style="margin-top: 20px">Wybierz Tagi</h4>
    <div class="form-group">
        <div id="tags-display" class="selected-tags-container mt-2"></div>
        <input type="hidden" name="SelectedTags" id="selected-tags" />
        <button style="margin-top: 5px;" type="button" class="btn btn-secondary mb-3" onclick="openTagsModal()">Wybierz Tagi</button>
    </div>

    <h4 style="margin-top: 20px">Dodaj Pokoje</h4>
    <div id="rooms-container">
        <table class="table table-bordered">
            <thead class="thead-light">
                <tr>
                    <th>Typ pokoju</th>
                    <th>Nazwa pokoju</th>
                    <th>Cena za noc (zł)</th>
                    <th>Pojemność (w osobach)</th>
                    <th>Udogodnienia</th>
                    <th>Zdjęcia</th>
                    <th>Aktywny</th>
                    <th>Usuń</th>
                </tr>
            </thead>
            <tbody id="rooms-table-body"></tbody>
        </table>
        <button type="button" class="btn btn-secondary" onclick="addRoom()">Dodaj Pokój</button>
    </div>

    <button style="margin-left: 570px; margin-top: 10px; font-size: 20px" type="submit" class="darkcyan-button">Stwórz Schronisko</button>
</form>

<script>
    const API_KEY = 'EqrphcGjSSf6pg5L1FXub1nmdOe9HzC_FV00UDqrve4';
    let lat = 52.06936257159014, lon = 19.48022053933678;

    const map = new maplibregl.Map({
        container: 'map',
        center: [lon, lat],
        zoom: 6,
        style: {
            version: 8,
            sources: {
                'basic-tiles': {
                    type: 'raster',
                    url: `https://api.mapy.cz/v1/maptiles/basic/tiles.json?apikey=${API_KEY}`,
                    tileSize: 256,
                },
            },
            layers: [{
                id: 'tiles',
                type: 'raster',
                source: 'basic-tiles',
            }],
        },
    });

    let marker = new maplibregl.Marker({ color: 'darkcyan' })
        .setLngLat([lon, lat])
        .addTo(map);

    document.getElementById('Latitude').value = lat;
    document.getElementById('Longitude').value = lon;

    map.on('click', function (e) {
        const coords = e.lngLat;
        marker.setLngLat([coords.lng, coords.lat]);
        document.getElementById('Latitude').value = coords.lat;
        document.getElementById('Longitude').value = coords.lng;
    });

    function addRoom() {
        const container = document.getElementById('rooms-table-body');
        const index = container.getElementsByTagName('tr').length;

        const row = document.createElement('tr');
        row.innerHTML = `
            <td>
                <select name="Rooms[${index}].IdType" class="form-control" data-val="true" data-val-required="Wybór typu pokoju jest wymagany.">
                    @foreach (var type in Model.RoomTypes)
                    {
                         <option value="@type.Value">@type.Text</option>
                    }
                </select>
                <span class="text-danger field-validation-valid" data-valmsg-for="Rooms[${index}].IdType" data-valmsg-replace="true"></span>
            </td>
            <td>
                <input type="text" name="Rooms[${index}].Name" class="form-control" data-val="true" data-val-required="Nazwa pokoju jest wymagana." />
                <span class="text-danger field-validation-valid" data-valmsg-for="Rooms[${index}].Name" data-valmsg-replace="true"></span>
            </td>
            <td>
                <input type="number" step="0.01" name="Rooms[${index}].PricePerNight" class="form-control" data-val="true" data-val-required="Cena pokoju jest wymagana." />
                <span class="text-danger field-validation-valid" data-valmsg-for="Rooms[${index}].PricePerNight" data-valmsg-replace="true"></span>
            </td>
            <td>
                <input type="number" name="Rooms[${index}].Capacity" class="form-control" data-val="true" data-val-required="Pojemność pokoju jest wymagana." />
                <span class="text-danger field-validation-valid" data-valmsg-for="Rooms[${index}].Capacity" data-valmsg-replace="true"></span>
            </td>
            <td>
                <button type="button" class="btn btn-secondary mb-2" onclick="openFacilitiesModal(${index})">Dodaj Udogodnienia</button>
                <div id="facilities-display-${index}" class="selected-facilities-container mt-2"></div>
                <input type="hidden" name="Rooms[${index}].SelectedFacilities" id="selected-facilities-${index}" />
            </td>
            <td>
                <input type="file" name="Rooms[${index}].RoomPhotos" class="form-control" multiple accept=".jpg, .jpeg, .png" />
                <small class="form-text text-muted">Max 3 zdjęcia, każde do 5MB</small>
            </td>
            <td>
                <input type="checkbox" class="form-check-input is-active-checkbox" data-index="${index}" onchange="updateIsActive(${index})" checked/>
                <input type="hidden" name="Rooms[${index}].IsActive" id="is-active-${index}" value="true" />
            </td>
            <td>
                <button type="button" class="btn btn-danger" onclick="removeRoom(this)">Usuń</button>
            </td>
        `;
        container.appendChild(row);

        /*var form = $('#formularz')

        form.removeData("validator")
            .removeData("unobtrusiveValidation");

        console.log(form);

        $.validator.unobtrusive.parse(form);*/
    }

    function updateIsActive(index) {
        const checkbox = document.querySelector(`.is-active-checkbox[data-index="${index}"]`);
        const hiddenField = document.getElementById(`is-active-${index}`);
        hiddenField.value = checkbox.checked;
    }

    function removeRoom(button) {
        const row = button.closest('tr');
        row.remove();
    }

    let selectedTags = [];

    function openTagsModal() {
        const selectedTagsInput = document.getElementById('selected-tags');
        const selectedTags = selectedTagsInput.value
            ? JSON.parse(selectedTagsInput.value)
            : [];

        document.querySelectorAll('#tags-list input[type="checkbox"]').forEach(checkbox => {
            checkbox.checked = selectedTags.includes(Number(checkbox.value));
        });

        document.getElementById('tags-modal').style.display = 'block';
        document.getElementById('tags-modal-overlay').style.display = 'block';
    }

    function closeTagsModal() {
        document.getElementById('tags-modal').style.display = 'none';
        document.getElementById('tags-modal-overlay').style.display = 'none';
    }

    function toggleTag(checkbox, tagName) {
        const selectedTagsInput = document.getElementById('selected-tags');
        let selectedTags = selectedTagsInput.value
            ? JSON.parse(selectedTagsInput.value)
            : [];

        if (checkbox.checked) {
            if (!selectedTags.includes(Number(checkbox.value))) {
                selectedTags.push(Number(checkbox.value));
                updateTagsDisplay(tagName, true);
            }
        } else {
            selectedTags = selectedTags.filter(id => id !== Number(checkbox.value));
            updateTagsDisplay(tagName, false);
        }

        selectedTagsInput.value = JSON.stringify(selectedTags);
    }

    function updateTagsDisplay(tagName, add) {
        const displayElement = document.getElementById('tags-display');
        if (add) {
            const tagItem = document.createElement('p');
            tagItem.className = 'tag-item';
            tagItem.innerText = tagName;
            tagItem.dataset.tagName = tagName;
            tagItem.dataset.tagId = selectedTags[selectedTags.length - 1];
            displayElement.appendChild(tagItem);
        } else {
            Array.from(displayElement.children).forEach(child => {
                if (child.dataset.tagName === tagName) {
                    child.remove();
                }
            });
        }
    }

    let currentRoomIndex = null;

    function openFacilitiesModal(roomIndex) {
        currentRoomIndex = roomIndex;
        document.querySelectorAll('#facilities-list input[type="checkbox"]').forEach(checkbox => {
            checkbox.checked = document.getElementById(`selected-facilities-${roomIndex}`).value.includes(checkbox.value);
        });
        document.getElementById('facilities-modal').style.display = 'block';
        document.getElementById('modal-overlay').style.display = 'block';
    }

    function closeFacilitiesModal() {
        document.getElementById('facilities-modal').style.display = 'none';
        document.getElementById('modal-overlay').style.display = 'none';
        currentRoomIndex = null;
    }

    function toggleFacility(checkbox, facilityName) {
        const selectedFacilitiesInput = document.getElementById(`selected-facilities-${currentRoomIndex}`);

        let selectedFacilities = selectedFacilitiesInput.value ?
            JSON.parse(selectedFacilitiesInput.value) : [];

        if (checkbox.checked) {
            if (!selectedFacilities.includes(Number(checkbox.value))) {
                selectedFacilities.push(Number(checkbox.value));
            }
        } else {
            selectedFacilities = selectedFacilities.filter(id => id !== Number(checkbox.value));
        }

        selectedFacilitiesInput.value = JSON.stringify(selectedFacilities);
        updateFacilitiesListDisplay(currentRoomIndex, facilityName, checkbox.checked);
    }

    function updateFacilitiesListDisplay(roomIndex, facilityName, add) {
        const displayElement = document.getElementById(`facilities-display-${roomIndex}`);
        const facilityItem = document.createElement('span');
        facilityItem.className = 'badge badge-info m-1';
        facilityItem.innerText = facilityName;

        if (add) {
            displayElement.appendChild(facilityItem);
        } else {
            [...displayElement.children].forEach(child => {
                if (child.innerText === facilityName) child.remove();
            });
        }
    }
</script>

@if (Model.SelectedTags != null && Model.SelectedTags.Any())
{
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const selectedTags = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.SelectedTags));
            const tagsDisplay = document.getElementById('tags-display');
            const hiddenTagsInput = document.getElementById('selected-tags');

            hiddenTagsInput.value = JSON.stringify(selectedTags);

            selectedTags.forEach(function (tagId) {
                const checkbox = document.querySelector(`#tags-list input[value="${tagId}"]`);
                if (checkbox) {
                    checkbox.checked = true;
                    const tagName = checkbox.parentElement.textContent.trim();
                    const tagItem = document.createElement('p');
                    tagItem.className = 'tag-item';
                    tagItem.innerText = tagName;
                    tagItem.dataset.tagName = tagName;
                    tagItem.dataset.tagId = tagId;
                    tagsDisplay.appendChild(tagItem);
                }
            });
        });
    </script>
}

@if (Model.Rooms != null && Model.Rooms.Any())
{
    <script>
        document.addEventListener('DOMContentLoaded', function () {
        @for (int roomIndex = 0; roomIndex < Model.Rooms.Count; roomIndex++)
        {
            var room = Model.Rooms[roomIndex];
            <text>
                        addRoom();
                        var lastRow = document.getElementById('rooms-table-body').lastElementChild;

                        // Ustaw typ pokoju
                        var roomTypeSelect = lastRow.querySelector('select[name$=".IdType"]');
                        if (roomTypeSelect) {
                            roomTypeSelect.value = "@room.IdType";
                            }

                        // Ustaw nazwę pokoju
                        var roomNameInput = lastRow.querySelector('input[name$=".Name"]');
                        if (roomNameInput) {
                            roomNameInput.value = "@room.Name";
                            }

                        // Ustaw cenę
                        var roomPriceInput = lastRow.querySelector('input[name$=".PricePerNight"]');
                        if (roomPriceInput) {
                            roomPriceInput.value = "@room.PricePerNight";
                            }

                        // Ustaw pojemność
                        var roomCapacityInput = lastRow.querySelector('input[name$=".Capacity"]');
                        if (roomCapacityInput) {
                            roomCapacityInput.value = "@room.Capacity";
                            }

                        // Obsługa udogodnień pokoju
                @if (room.SelectedFacilities != null && room.SelectedFacilities.Any())
                {
                    <text>
                                var roomIndex = @roomIndex;
                                var selectedFacilities = [@string.Join(",", room.SelectedFacilities)];

                                selectedFacilities.forEach(function(facilityId) {
                                        var checkbox = document.querySelector(`#facilities-list input[value="${facilityId}"]`);
                                if (checkbox) {
                                    currentRoomIndex = roomIndex;
                                var facilityName = checkbox.parentElement.textContent.trim();
                                checkbox.checked = true;
                                toggleFacility(checkbox, facilityName);
                                        }
                                    });
                    </text>
                }

                        // Ustaw aktywność pokoju
                        var activeCheckbox = lastRow.querySelector('.is-active-checkbox');
                        if (activeCheckbox) {
                            activeCheckbox.checked = @room.IsActive.ToString().ToLower();
                        updateIsActive(document.getElementById('rooms-table-body').children.length - 1);
                            }
            </text>
        }
                });
    </script>
}

<!-- Modal Udogodnień -->
<div id="facilities-modal" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: white; border: 1px solid #ddd; border-radius: 10px; padding: 20px; z-index: 1000; width: 300px;">
    <h4>Wybierz Udogodnienia</h4>
    <ul id="facilities-list">
        @foreach (var facility in Model.Facilities as List<SchroniskaTurystyczne.Models.Facility>)
        {
            <li>
                <label>
                    <input type="checkbox" value="@facility.Id" onclick="toggleFacility(this, '@facility.Name')" />
                    @facility.Name
                </label>
            </li>
        }
    </ul>
    <p style="margin-top: 5px; font-size: 13px; color: darkgray">Brakuje jakiegoś udogodnienia? Napisz do nas, a rozważymy jego dodanie!</p>
    <button type="button" class="btn btn-primary mt-3" onclick="closeFacilitiesModal()">Zamknij</button>
</div>
<div id="modal-overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 999;"></div>

<!-- Modal Tagów -->
<div id="tags-modal" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: white; border: 1px solid #ddd; border-radius: 10px; padding: 20px; z-index: 1000; width: 300px;">
    <h4>Wybierz Tagi</h4>
    <ul id="tags-list">
        @foreach (var tag in Model.Tags as List<SchroniskaTurystyczne.Models.Tag>)
        {
            <li>
                <label>
                    <input type="checkbox" value="@tag.Id" onclick="toggleTag(this, '@tag.Name')" />
                    @tag.Name
                </label>
            </li>
        }
    </ul>
    <p style="margin-top: 5px; font-size: 13px; color: darkgray">Brakuje jakiegoś tagu? Napisz do nas, a rozważymy jego dodanie!</p>
    <button type="button" class="btn btn-primary mt-3" onclick="closeTagsModal()">Zamknij</button>
</div>
<div id="tags-modal-overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 999;"></div>

@if (TempData["ErrorMessage"] != null)
{
    <div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="errorModalLabel">Błąd</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @Html.Raw(TempData["ErrorMessage"])
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zamknij</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
            errorModal.show();
        });
    </script>
}